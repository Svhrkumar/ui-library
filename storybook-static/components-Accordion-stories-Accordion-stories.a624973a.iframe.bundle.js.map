{"version":3,"file":"components-Accordion-stories-Accordion-stories.a624973a.iframe.bundle.js","mappings":";;;AAWA;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;AAoBA;;;;;AAKA;;;;;;;;;AAmBA","sources":["webpack://@raghavsvh/pixelflex/./src/components/Accordion/Accordion.tsx"],"sourcesContent":["import React, { useState, FC, Fragment } from 'react';\r\nimport styled from 'styled-components';\r\nimport { FaChevronDown, FaChevronUp } from 'react-icons/fa';\r\nimport { AccordionContext, useAccordionContext } from './useAccordionContext';\r\nimport classNames from 'classnames';\r\n\r\nconst AccordionContainer = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n`;\r\n\r\nconst AccordionItemContainer = styled.div`\r\n\tmargin-bottom: 1.5rem;\r\n\tborder-radius: 5px;\r\n\t&.sm {\r\n\t\twidth: 50%;\r\n\t}\r\n\t&.md {\r\n\t\twidth: 60%;\r\n\t}\r\n\t&.lg {\r\n\t\twidth: 90%;\r\n\t}\r\n`;\r\n\r\nconst AccordionHeaderContainer = styled.div<{ isOpen: boolean }>`\r\n\tpadding: 1rem;\r\n\tborder: 1px solid #ccc;\r\n\tborder-radius: 5px;\r\n\tbox-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\r\n\tdisplay: flex;\r\n\tjustify-content: space-between;\r\n\talign-items: center;\r\n\tcursor: pointer;\r\n\tmargin-bottom: 0.5rem;\r\n\t&.light {\r\n\t\tbackground-color: #e8ebe9;\r\n\t\tcolor: #4b4d4b;\r\n\t}\r\n\t&.dark {\r\n\t\tbackground-color: #4b4d4b;\r\n\t\tcolor: #e8ebe9;\r\n\t}\r\n`;\r\n\r\nconst AccordionBodyContainer = styled.div<{ isOpen: boolean }>`\r\n\tpadding: 1rem;\r\n\tborder: 1px solid #ccc;\r\n\tborder-radius: 5px;\r\n\tbox-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\r\n\tdisplay: ${(props) => (props.isOpen ? 'block' : 'none')};\r\n\t&.light {\r\n\t\tbackground-color: #e8ebe9;\r\n\t\tcolor: #4b4d4b;\r\n\t}\r\n\t&.dark {\r\n\t\tbackground-color: #4b4d4b;\r\n\t\tcolor: #e8ebe9;\r\n\t}\r\n`;\r\n\r\nexport interface AccProps {\r\n\tchildren: React.ReactNode;\r\n\tclassName?: string;\r\n\tsize?: 'sm' | 'md' | 'lg';\r\n\tisIcon?: boolean;\r\n\ttheme?: 'dark' | 'light';\r\n}\r\n\r\nconst AccordionComponent: FC<AccProps> = ({ children }) => {\r\n\treturn <AccordionContainer>{children}</AccordionContainer>;\r\n};\r\n\r\nconst AccordionItem: FC<AccProps> = ({ children, size, theme = '' }) => {\r\n\tconst [isOpen, setIsOpen] = useState(false);\r\n\r\n\tconst values = {\r\n\t\tisOpen,\r\n\t\tsetIsOpen,\r\n\t\ttheme,\r\n\t};\r\n\r\n\treturn (\r\n\t\t<AccordionContext.Provider value={values}>\r\n\t\t\t<AccordionItemContainer className={classNames(size)}>\r\n\t\t\t\t{children}\r\n\t\t\t</AccordionItemContainer>\r\n\t\t</AccordionContext.Provider>\r\n\t);\r\n};\r\n\r\nconst AccordionHeader: FC<AccProps> = ({ children, className, isIcon }) => {\r\n\tconst { isOpen, setIsOpen, theme } = useAccordionContext();\r\n\r\n\treturn (\r\n\t\t<AccordionHeaderContainer\r\n\t\t\tclassName={classNames(className, theme)}\r\n\t\t\tisOpen={isOpen}\r\n\t\t\tonClick={() => setIsOpen((prev) => !prev)}>\r\n\t\t\t{children}\r\n\t\t\t{isIcon && (\r\n\t\t\t\t<Fragment>{isOpen ? <FaChevronUp /> : <FaChevronDown />}</Fragment>\r\n\t\t\t)}\r\n\t\t</AccordionHeaderContainer>\r\n\t);\r\n};\r\n\r\nconst AccordionBody: FC<AccProps> = ({ children, className }) => {\r\n\tconst { isOpen, theme } = useAccordionContext();\r\n\r\n\treturn (\r\n\t\t<AccordionBodyContainer\r\n\t\t\tclassName={classNames(className, theme)}\r\n\t\t\tisOpen={isOpen}>\r\n\t\t\t{children}\r\n\t\t</AccordionBodyContainer>\r\n\t);\r\n};\r\n\r\nconst Accordion = Object.assign(AccordionComponent, {\r\n\tItem: AccordionItem,\r\n\tHeader: AccordionHeader,\r\n\tBody: AccordionBody,\r\n});\r\n\r\nexport default Accordion;\r\n"],"names":[],"sourceRoot":""}