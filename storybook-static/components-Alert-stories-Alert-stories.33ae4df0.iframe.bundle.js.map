{"version":3,"file":"components-Alert-stories-Alert-stories.33ae4df0.iframe.bundle.js","mappings":";;;;;;;;;;AAmBA;;;;;;;;;;;AAaA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;;AAIA;;;;AAMA;;;;AAMA;;;;;;;;;AA8FA","sources":["webpack://@raghavsvh/pixelflex/./src/components/Alert/Alert.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport classNames from 'classnames';\r\nimport { AlertContext, useAlertContext } from './useAlertcontext';\r\n\r\n// Define keyframes for the reveal animation\r\nconst revealAnimation = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n    transform: translateY(-10px);\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n`;\r\n\r\n// Ensure the container covers the entire viewport and overlays other content\r\nconst AlertContainer = styled.div`\r\n\tposition: fixed;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tz-index: 9999; /* Ensure it appears above other content */\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n\tpointer-events: none; /* Allow clicks through this container */\r\n`;\r\n\r\nconst AlertMessageStyle = styled.div`\r\n\tpadding: 0.1rem;\r\n\tborder: 1px solid #ccc;\r\n\tborder-radius: 9px;\r\n\tposition: absolute;\r\n\twidth: 25rem;\r\n\tz-index: 10000;\r\n\tpointer-events: auto;\r\n\tanimation: ${revealAnimation} 0.5s ease-out;\r\n\theight: auto;\r\n\tbackground-color: #fff;\r\n\t&.danger {\r\n\t\tbackground-color: #de0404;\r\n\t\tcolor: #fff;\r\n\t}\r\n\t&.warning {\r\n\t\tbackground-color: #f2af11;\r\n\t\tcolor: #fff;\r\n\t}\r\n\t&.info {\r\n\t\tbackground-color: #116ff2;\r\n\t\tcolor: #fff;\r\n\t}\r\n\t&.success {\r\n\t\tbackground-color: #40e300;\r\n\t\tcolor: #fff;\r\n\t}\r\n\t&.top-left {\r\n\t\ttop: 10px;\r\n\t\tleft: 10px;\r\n\t}\r\n\t&.top-right {\r\n\t\ttop: 10px;\r\n\t\tright: 10px;\r\n\t}\r\n\t&.bottom-right {\r\n\t\tbottom: 10px;\r\n\t\tright: 10px;\r\n\t}\r\n\t&.bottom-left {\r\n\t\tbottom: 10px;\r\n\t\tleft: 10px;\r\n\t}\r\n`;\r\n\r\nconst AlertBoodyStyle = styled.div`\r\n\tpadding: 3px 6px;\r\n\tcolor: #fff;\r\n`;\r\nconst AlertHeaderStyle = styled.div`\r\n\tborder-bottom: 1px solid #fff;\r\n\tpadding: 5px 6px;\r\n\tcolor: #fff;\r\n`;\r\n\r\nconst AlertFooterStyle = styled.div`\r\n\tborder-top: 1px solid #fff;\r\n\tpadding: 5px 6px;\r\n\tcolor: #fff;\r\n`;\r\n\r\nconst CloseButton = styled.button`\r\n\tposition: absolute;\r\n\ttop: 5px;\r\n\tright: 5px;\r\n\tbackground: none;\r\n\tborder: none;\r\n\tfont-size: 16px;\r\n\tcursor: pointer;\r\n\tcolor: inherit;\r\n`;\r\n\r\nexport interface AlertProps {\r\n\tchildren: React.ReactNode;\r\n\tclassName?: string;\r\n\topen?: boolean;\r\n\tonClose?: () => void;\r\n\tvariant?: 'success' | 'danger' | 'info' | 'warning';\r\n\tposition?: 'top-left' | 'top-right' | 'bottom-right' | 'bottom-left';\r\n\tduration?: number;\r\n\tdismissible?: boolean;\r\n}\r\n\r\nconst AlertComponent: FC<AlertProps> = ({\r\n\tchildren,\r\n\topen,\r\n\tonClose,\r\n\tvariant,\r\n\tposition,\r\n\tduration,\r\n\tdismissible,\r\n}) => {\r\n\tconst [isOpen, setIsOpen] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tlet timer: NodeJS.Timeout;\r\n\t\tif (open) {\r\n\t\t\tsetIsOpen(true);\r\n\t\t\tif (!dismissible) {\r\n\t\t\t\ttimer = setTimeout(() => {\r\n\t\t\t\t\tsetIsOpen(false);\r\n\t\t\t\t\tif (onClose) onClose();\r\n\t\t\t\t}, duration || 2000);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tsetIsOpen(false);\r\n\t\t}\r\n\t\treturn () => clearTimeout(timer);\r\n\t}, [open, duration, onClose, dismissible]);\r\n\r\n\tif (!isOpen) return null;\r\n\r\n\tconst values = {\r\n\t\tisOpen,\r\n\t\tonClose,\r\n\t\tvariant,\r\n\t\tposition,\r\n\t};\r\n\r\n\treturn ReactDOM.createPortal(\r\n\t\t<AlertContext.Provider value={values}>\r\n\t\t\t<AlertContainer className='alert-container'>{children}</AlertContainer>\r\n\t\t</AlertContext.Provider>,\r\n\t\tdocument.getElementById('alert-root')!\r\n\t);\r\n};\r\n\r\nconst AlertMessage: FC<{ children: React.ReactNode }> = ({ children }) => {\r\n\tconst { isOpen, onClose, variant, position } = useAlertContext();\r\n\treturn (\r\n\t\t<AlertMessageStyle className={classNames(variant, position)}>\r\n\t\t\t{isOpen && <CloseButton onClick={onClose}>&times;</CloseButton>}\r\n\t\t\t{children}\r\n\t\t</AlertMessageStyle>\r\n\t);\r\n};\r\nconst AlertBody: FC<{ children: React.ReactNode }> = ({ children }) => {\r\n\treturn <AlertBoodyStyle>{children}</AlertBoodyStyle>;\r\n};\r\n\r\nconst AlertHeader: FC<{ children: React.ReactNode }> = ({ children }) => {\r\n\treturn <AlertHeaderStyle>{children}</AlertHeaderStyle>;\r\n};\r\n\r\nconst AlertFooter: FC<{ children: React.ReactNode }> = ({ children }) => {\r\n\treturn <AlertFooterStyle>{children}</AlertFooterStyle>;\r\n};\r\n\r\nconst Alert = Object.assign(AlertComponent, {\r\n\tHeader: AlertHeader,\r\n\tContainer: AlertMessage,\r\n\tBody: AlertBody,\r\n\tFooter: AlertFooter,\r\n});\r\n\r\nexport default Alert;\r\n"],"names":[],"sourceRoot":""}